#!/bin/bash

t_work=600 # work sprint time 
t_short_break=60 # short break in seconds
t_long_break=900 # long break in seconds
n_short_break=3 # number of short breaks before long break

pcount=`pgrep --count bashbreak`
if [ $pcount -gt 1 ]
then
  echo "Another bashbreak instance already running, kill it before starting a new one (type: pkill -9 bashbreak)."
  exit	  
fi

# convert time to ms or min
(( t_work_min=t_work/60 ))
(( t_short_break_ms=t_short_break*1000 ))
(( t_long_break_ms=t_long_break*1000 ))
(( t_long_break_min=t_long_break/60 ))

# make trap to notify on kill signal
set_trap() {
  trap 'notify-send "bashbreak" "Exited."; echo "`date +"%H:%M"` Exiting bashbreak."; exit' SIGINT SIGTERM SIGKILL
}

short_break() {
  for i in `seq 1 $n_short_break`
  do
	msg="Take a $t_short_break s break. ($i/$1)"
	sleep $t_work
	echo "`date +"%H:%M"` $msg" >&1
	notify-send "bashbreak" "$msg" -t "$t_short_break_ms"
    sleep $t_short_break
	# continue only if user is not idle (requires xprintidle)
    check_idle
	i=i+1
  done
}

long_break() {
  msg="Take a $t_long_break_min min break."
  echo "`date +"%H:%M"` $msg" >&1
  notify-send "bashbreak" "$msg" -t "$t_long_break_ms"
  sleep $t_long_break
  check_idle
}

check_idle() {
  if ! [ -x '$(command -v xprintidle)' ]
  then
    t_idle=`xprintidle` # user idle time in ms
    (( t_idle_=$t_idle+1 ))
    while [ $t_idle_ -ge $t_idle ] 
    do
      sleep 1
      t_idle_=`xprintidle`
    done
  else
    echo '`date +"%H:%M"` xprintidle not found. Not checking for user idle.' >&2
  fi
  echo "`date +"%H:%M"` Starting next work sprint." >&1
}

# start of program
msg="Starting session with $t_work_min min work sprints: $n_short_break x $t_short_break s short breaks before a $t_long_break_min min long break."
echo "`date +"%H:%M"` $msg" >&1
notify-send "bashbreak" "$msg" -t 10000
while true 
do
  set_trap
  short_break $n_short_break
  sleep $t_work
  long_break
done
